"""
Django settings for web_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
MEDIA_ROOT = os.path.join(BASE_DIR, 'TO-DO-APP', 'task_images')
MEDIA_URL = '/media/'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-9(dvt7_i-#x05(+#ib%rqrqof&i6w^c2=(%)lfsfqoeml0pz#6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS=['*']


# Application definition

INSTALLED_APPS = [
    'anymail',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'django_celery_results',
    'corsheaders',
    'rest_framework',
    'rest_framework_simplejwt',
    'api'
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
]

CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOW_CREDENTIALS = True

# CORS_ALLOW_METHODS = [
#     "DELETE",
#     "GET",
#     "OPTIONS",
#     "PATCH",
#     "POST",
#     "PUT",
# ]
# CORS_ALLOW_HEADERS = [
#     "accept",
#     "accept-encoding",
#     "authorization",
#     "content-type",
#     "dnt",
#     "origin",
#     "user-agent",
#     "x-csrftoken",
#     "x-requested-with",
# ]


ROOT_URLCONF = 'web_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'web_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
AUTH_USER_MODEL = 'api.User'
REST_FRAMEWORK = {
     'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
      ],
}

# SIMPLE_JWT = {
#      'ACCESS_TOKEN_LIFETIME': timedelta(minutes=10),
#      'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
#      'ROTATE_REFRESH_TOKENS': True,
#      'BLACKLIST_AFTER_ROTATION': True
# }

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_ROOT= os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'web_project/static')
]
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



EMAIL_BACKEND = "anymail.backends.mailgun.EmailBackend"
ANYMAIL = {
    "MAILGUN_API_KEY": "a4426ae9802f89ce3932509c4113609b-102c75d8-3661c0db",
    "MAILGUN_SENDER_DOMAIN": "postmaster@sandbox7eec2002e12a43cc830980dd86c463b8.mailgun.org",
}
EMAIL_PORT = 587

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'django-db'
# RabbitMQ configuration
# BROKER_URL = 'redis://localhost:6379/0'  # Update with your RabbitMQ credentials and hostname

# # Celery configuration our-project\backend\db.sqlite3 E:\to-do-app\our-project\backend\db.sqlite3
# CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Update with your SQLite database path
CELERY_APP_NAME = 'web_project'
from datetime import datetime, timedelta
from celery.schedules import crontab
from api.tasks import schedule_mail

now = datetime.now()
schedule_time = now.replace(hour=2, minute=33, second=0, microsecond=0)

if schedule_time < now:
    # If the schedule time has already passed today, schedule it for tomorrow
    schedule_time += timedelta(days=1)

# Calculate the time difference between now and the schedule time
time_difference = schedule_time - now

# Calculate the total seconds until the next scheduled time
total_seconds = time_difference.total_seconds()

# Define the Celery beat schedule
CELERY_BEAT_SCHEDULE = {
    'send-daily-email': {
        'task': 'api.tasks.schedule_mail',
        'schedule': timedelta(seconds=total_seconds),
        'kwargs': {'arg1': 'value1', 'arg2': 'value2', 'arg3': 'value3'},
    },
    'reminder': {
        'task': 'api.tasks.reminder',  # Replace with your task function
        'schedule': timedelta(minutes=1),  # Run every 10 minutes
        'kwargs': {'arg1': 'value1', 'arg2': 'value2', 'arg3': 'value3'},  # Optional kwargs
    },
}

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.MemoryFileUploadHandler',
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
